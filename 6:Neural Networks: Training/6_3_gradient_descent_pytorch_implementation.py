# -*- coding: utf-8 -*-
"""6.3:Gradient Descent: PyTorch Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q2CT0clAQIyNXnaO_BCxagmt0GrWYE-w
"""

import torch
import pandas as pd
from matplotlib import pyplot as plt

# step-1: Read the dataset from csv file
df = pd.read_csv('bonus_dataset.csv')
df.head()

df.shape

performance = torch.tensor(df['performance'].values, dtype=torch.float32)
years_of_experience = torch.tensor(df['years_of_experience'].values, dtype=torch.float32)
projects_completed = torch.tensor(df['projects_completed'].values, dtype=torch.float32)
bonus = torch.tensor(df['bonus'].values, dtype=torch.float32)

w1 = torch.rand(1, requires_grad=True)
w2 = torch.rand(1, requires_grad=True)
w3 = torch.rand(1, requires_grad=True)
bias = torch.rand(1, requires_grad=True)

epochs = 4000
learning_rate = 0.007

for epoch in range(epochs):
    y_pred = w1 * performance + w2 * years_of_experience + w3 * projects_completed + bias

    loss = torch.mean((y_pred - bonus) ** 2)

    loss.backward()

    with torch.no_grad():
        w1 -= learning_rate * w1.grad
        w2 -= learning_rate * w2.grad
        w3 -= learning_rate * w3.grad
        bias -= learning_rate * bias.grad

    w1.grad.zero_()
    w2.grad.zero_()
    w3.grad.zero_()
    bias.grad.zero_()

    if epoch % 100 == 0:
        print(f'Epoch: {epoch}, Loss: {loss.item():0.2f}')

w1.item(), w2.item(), w3.item(), bias.item()

predicted_bonus = w1 * performance + w2 * years_of_experience + w3 * projects_completed + bias

predicted_bonus

